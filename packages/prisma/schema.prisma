// ! Schema ---------------------------------------------------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ! Necessary for Next auth ----------------------------------------------------------------

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// ! Our Models -------------------------------------------------------------------------------

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  password      String
  userName      String?     @unique
  image         String?
  workingAt     String?
  bio           String?
  stars         Int?        @default(0)
  location      String?
  verified      Boolean?    @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
  sessions      Session[]
  accounts      Account[]
  followers     User[]      @relation(name: "follow")
  following     User[]      @relation(name: "follow")
  post          Posts[]
  applied       Applied[]
  bookmarks     Bookmarks[]
  comments      Comments[]
}

model Posts {
  id                   String      @id @default(cuid())
  userId               String
  user                 User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  title                String
  description          String?
  createdAt            DateTime    @default(now())
  expiresAt            DateTime?
  role                 String?
  jobType              String?
  experience           Int?
  location             String?
  startingRange        Int?
  endingRange          Int?
  image                String?
  acceptingReferralsNo Int?
  normalPost           Boolean?    @default(false)
  tags                 Tags[]
  applied              Applied[]
  bookmarks            Bookmarks[]
  comments             Comments[]
  updatedAt            DateTime    @updatedAt

  @@index([userId])
}

model Applied {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  posts     Posts    @relation(fields: [postId], references: [id])
  postId    String
  message   String?  @db.Text
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Tags {
  id    String  @id @default(cuid())
  name  String  @unique
  posts Posts[]
}

model Comments {
  id        String   @id @default(cuid())
  text      String   @db.Text
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  posts     Posts    @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

model Bookmarks {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  posts     Posts    @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

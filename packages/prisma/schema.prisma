// ! Schema ---------------------------------------------------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ! Necessary for Next auth ----------------------------------------------------------------

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ! Our Models -------------------------------------------------------------------------------

model User {
  id            String      @id @default(cuid())
  password      String
  fullName      String? // ? change it to name
  userName      String?     @unique
  email         String      @unique
  emailVerified DateTime?
  image         String?
  workingAt     String?
  bio           String?
  stars         Int? //? @default(0)
  sessions      Session[]
  accounts      Account[]
  followers     User[]      @relation(name: "follow")
  following     User[]      @relation(name: "follow")
  post          Posts[]
  applied       Applied[]
  bookmarks     Bookmarks[]
  comments      Comments[]
}

// ? LivesAt
// ? verified

model Posts {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  contents      String // ? change it to tile
  description   String
  createdAt     DateTime    @default(now())
  expiresAt     DateTime?
  role          String?
  jobType       String?
  experience    Int?
  location      String?
  startingRange Int?
  endindRange   Int? // ? Typo
  image         String?
  tags          Tags[]
  applied       Applied[]
  bookmarks     Bookmarks[]
  comments      Comments[]
  updatedAt     DateTime    @updatedAt
  // ? Limit number of referals requests
  // ? Normal Post or normal post category

  @@index([userId])
}

// ? Apply with a catchy message with word limits

model Applied {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  posts     Posts    @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Tags {
  id    String  @id @default(cuid())
  name  String  @unique
  posts Posts[]
}

model Comments {
  id        String   @id @default(cuid())
  text      String   @db.Text
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  posts     Posts    @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

model Bookmarks {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  posts     Posts    @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

//? Notifications

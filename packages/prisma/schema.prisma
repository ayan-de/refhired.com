generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  email            String      @unique
  emailVerified    DateTime?
  image            String?
  name             String?
  bio              String?
  createdAt        DateTime?   @default(now())
  locale           String?
  location         String?
  stars            Int?        @default(0)
  updatedAt        DateTime?   @updatedAt
  userName         String      @unique
  workingAt        String?
  stripeCustomerId String?     @unique
  id               String      @id @default(cuid())
  accounts         Account[]
  applied          Applied[]
  bookmarks        Bookmarks[]
  comments         Comments[]
  posts            Posts[]
  sessions         Session[]
}

model Account {
  id                String  @id @default(cuid())
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Posts {
  content       Json?
  createdAt     DateTime    @default(now())
  expiresAt     DateTime?
  role          String?
  jobType       String?
  experience    Int?
  location      String?
  startingRange Int?
  image         String?
  updatedAt     DateTime    @updatedAt
  endingRange   Int?
  id            Int         @id @default(autoincrement())
  userId        String
  stars         String?
  limit         Int?
  pdfs          Json?
  links         Json?
  // ! accept        Json?
  postType      postType    @default(post)
  applied       Applied[]
  bookmarks     Bookmarks[]
  comments      Comments[]
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags          Tags[]      @relation("PostsToTags")

  @@index([userId])
}

model Applied {
  createdAt DateTime @default(now())
  content   Json?
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int
  pdfs      Json?
  links     Json?
  posts     Posts    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Tags {
  id    String  @id @default(cuid())
  name  String  @unique
  posts Posts[] @relation("PostsToTags")
}

model Comments {
  text      String
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int
  posts     Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model Bookmarks {
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int
  posts     Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

enum postType {
  referralPost
  findReferrer
  post
}
